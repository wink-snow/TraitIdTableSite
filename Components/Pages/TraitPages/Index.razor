@page "/"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using TraitBrowser.Models
@using TraitBrowserWebApp.Models
@using TraitBrowserWebApp.Data
@using TraitBrowserWebApp.Components.Account
@using System.Text.RegularExpressions
@implements IAsyncDisposable
@inject IDbContextFactory<TraitBrowserWebApp.Data.TraitBrowserContext> TraitDbFactory
@inject IDbContextFactory<TraitBrowserWebApp.Data.LocBuffContext> LocBuffDbFactory
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Trait</PageTitle>

<h1>Trait List</h1>

<div>
    <input type="search" placeholder="Search by name" @bind="nameFilter" @bind:event="oninput" />
</div>

<div>
<QuickGrid Class="table" Items="FilteredTraits" Pagination="pagination" >
    <PropertyColumn Property="trait => trait.TraitId" Sortable="true" Title="ID" />
    <PropertyColumn Property="trait => trait.Name == null ? trait.Name : LocalizedTrait(trait.Name, TraitSortColumn.Name)" Title="Name" />
    <PropertyColumn Property="trait => trait.Genre" Title="Genre" />
    <PropertyColumn Property="trait => trait.Name == null ? trait.Name : LocalizedTrait(trait.Name, TraitSortColumn.Description)" Title="Description" />
</QuickGrid>
</div>

<Paginator State="pagination" />

<div class="st-footer">
    <div class="st-footer-content">
        <p><a href="https://beian.miit.gov.cn/" target="_blank">陕ICP备2024041464号-1</a></p>
    </div>
</div>

@code { 
    private LocBuffContext locBuffContext = default!;
    private TraitBrowserContext traitContext = default!;
    private IQueryable<LocBuff> localizedTrait = default!;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 8 };
    private string nameFilter = string.Empty;
    private HttpContext httpContext { get; set; } = default!;

    protected override void OnInitialized()
    {
        traitContext = TraitDbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync()
    {
        await traitContext.DisposeAsync();
    }

    private IQueryable<Trait> FilteredTraits => 
        (traitContext.Trait.Where(m => m.Name!.Contains(nameFilter))
                    .OrderBy(m => m.TraitId));

    private string ExtractTraitName(string input, string prefix)
    {
        var match = Regex.Match(input, $@"^{prefix}_(.+)$");
        return match.Success ? match.Groups[1].Value : input;
    }
    
    private string LocalizedTrait(string traitName, TraitSortColumn sortColumn)
    {
        using (locBuffContext = LocBuffDbFactory.CreateDbContext())
        {   
            if (sortColumn == TraitSortColumn.Name)
            {
                localizedTrait = locBuffContext.LocBuff.Where(p => p.Name == $"BuffName_{traitName}");
            }
            else if (sortColumn == TraitSortColumn.Description)
            {
                localizedTrait = locBuffContext.LocBuff.Where(p => p.Name == $"BuffInfo_{traitName}");
            }

            if (localizedTrait.Any())
            {
                return localizedTrait.First().SChinese ?? traitName;
            }
            
            if (sortColumn == TraitSortColumn.Name)
            {
                return traitName;
            }

            return string.Empty;
        }
    }
    
    private async Task DisplayAuthError()
    {
        await JS.InvokeVoidAsync("displayTickerAuthError");
    }
}             