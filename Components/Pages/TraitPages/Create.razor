@page "/traits/create"
@using Microsoft.EntityFrameworkCore
@using TraitBrowser.Models
@inject IDbContextFactory<TraitBrowserWebApp.Data.TraitBrowserContext> DbFactory
@inject NavigationManager NavigationManager

@attribute [Authorize (Roles = "Admin")]

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Trait</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Trait" OnValidSubmit="AddTrait" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="traitid" class="form-label">TraitId:</label> 
                <InputNumber id="traitid" @bind-Value="Trait.TraitId" class="form-control" /> 
                <ValidationMessage For="() => Trait.TraitId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="Trait.Name" class="form-control" /> 
                <ValidationMessage For="() => Trait.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="genre" class="form-label">Genre:</label> 
                <InputText id="genre" @bind-Value="Trait.Genre" class="form-control" /> 
                <ValidationMessage For="() => Trait.Genre" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputText id="description" @bind-Value="Trait.Description" class="form-control" /> 
                <ValidationMessage For="() => Trait.Description" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/traits">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Trait Trait { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddTrait()
    {
        using var context = DbFactory.CreateDbContext();
        context.Trait.Add(Trait);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/traits");
    }
}
